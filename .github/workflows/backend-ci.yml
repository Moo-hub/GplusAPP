name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  test:
    name: Run Python Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    
    - name: Install dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      working-directory: backend
      run: |
        pytest -v
  
  alembic-check:
    name: Alembic Sanity Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    
    - name: Install dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check Alembic migrations
      working-directory: backend
      run: |
        # Verify alembic can run without errors
        alembic check
        
        # Verify migrations are in order
        alembic history
        
        # Create a test database and apply migrations
        export DATABASE_URL="sqlite:///./test_migrations.db"
        alembic upgrade head
        
        # Verify the database was created and migrations applied
        python -c "
        from sqlalchemy import create_engine, inspect
        import os
        
        engine = create_engine(os.environ.get('DATABASE_URL'))
        inspector = inspect(engine)
        tables = inspector.get_table_names()
        
        # Check that users table exists
        assert 'users' in tables, 'users table not found'
        
        # Check that is_superuser column exists
        columns = [col['name'] for col in inspector.get_columns('users')]
        assert 'is_superuser' in columns, 'is_superuser column not found'
        
        print('âœ“ Alembic migrations verified successfully')
        print(f'  - Tables: {tables}')
        print(f'  - Users columns: {columns}')
        "
        
        # Clean up test database
        rm -f test_migrations.db
