name: Full CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - run: pip install --upgrade pip
      - run: pip install -r backend/requirements.txt
      - run: pytest --cov=backend --disable-warnings
        working-directory: ./backend
      - uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: ./backend/htmlcov

  frontend-tests:
    runs-on: ubuntu-latest
    needs: backend-tests
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
        working-directory: ./frontend
      - run: npx eslint . --ext .js,.jsx
        working-directory: ./frontend
      - run: npx prettier --check .
        working-directory: ./frontend
      - run: npm test -- --coverage --watchAll=false
        working-directory: ./frontend
      - uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: ./frontend/coverage

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: frontend-tests
    steps:
      - uses: actions/checkout@v3
      - uses: amondnet/vercel-action@v20
        with:
          zeit-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          prod: true

  deploy-backend:
    runs-on: ubuntu-latest
    needs: backend-tests
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - run: |
          docker build -t your-docker-username/gplus-backend:latest ./backend
          docker push your-docker-username/gplus-backend:latest

  notify-slack:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, deploy-frontend, deploy-backend]
    steps:
      - uses: rtCamp/action-slack@v2
        with:
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          message: |
            ${{ job.status == 'success' && ':white_check_mark: CI/CD pipeline succeeded! All tests passed and deployments completed.' || ':x: CI/CD pipeline failed! Check the jobs for details.' }}
