name: GPlus App CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run backend tests
        run: |
          pytest --cov=app --cov-report=xml
        env:
          POSTGRES_SERVER: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379

  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          npm ci
          npm install --save-dev canvas jest-axe
      
      - name: Run frontend tests
        run: npm test -- --coverage
      
      - name: Run accessibility tests
        run: npm test -- --run a11y
      
      - name: Run frontend build
        run: npm run build

  accessibility-report:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          npm ci
          npm install --save-dev canvas jest-axe
      
      - name: Run accessibility tests with detailed output
        run: npm test -- --run a11y --reporter verbose > accessibility-report.md || true
      
      - name: Upload accessibility report
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-report
          path: frontend/accessibility-report.md
  
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript,python"
          output: codeql-results
      
      - name: Upload CodeQL results
        uses: actions/upload-artifact@v3
        with:
          name: codeql-results
          path: codeql-results
          retention-days: 14
      
      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.github/workflows/zap-rules.conf'
          cmd_options: '-a -d'
          allow_issue_writing: false
        continue-on-error: true
      
      - name: Upload ZAP scan report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: zap-scan-report
          path: |
            report.html
            report.md
            report.xml
          retention-days: 14
          
      - name: Generate consolidated security report
        if: always()
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "## Scan Date: $(date)" >> security-summary.md
          echo "## CodeQL Results" >> security-summary.md
          echo "See CodeQL results artifact for detailed findings" >> security-summary.md
          echo "## ZAP Scan Results" >> security-summary.md
          if [ -f "report.md" ]; then
            cat report.md >> security-summary.md
          else
            echo "ZAP scan report not generated" >> security-summary.md
          fi
      
      - name: Upload consolidated security report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 30

  build-and-push:
    needs: [test-backend, test-frontend, accessibility-report, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/gplus-backend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/gplus-backend:${{ github.sha }}
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/gplus-frontend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/gplus-frontend:${{ github.sha }}

  code-quality:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          npm ci
      
      - name: Run ESLint
        run: npx eslint --ext .js,.jsx,.ts,.tsx src/ --format json --output-file eslint-report.json || true
      
      - name: Upload ESLint report
        uses: actions/upload-artifact@v3
        with:
          name: eslint-report
          path: frontend/eslint-report.json
          
      - name: Check for severe ESLint errors
        run: |
          if [ "$(jq '.[] | select(.severity == 2) | .severity' eslint-report.json | wc -l)" -gt "0" ]; then
            echo "Critical ESLint errors found!"
            exit 1
          else
            echo "No critical ESLint errors found."
          fi

  deploy:
    needs: [build-and-push, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to production
        run: |
          echo "Deployment would happen here..."
          # In a real scenario, this would trigger a deploy to your server or cloud provider
          # For example, using SSH to run docker-compose commands on your server
