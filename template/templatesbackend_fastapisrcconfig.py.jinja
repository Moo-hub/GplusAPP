# templates/backend_fastapi/src/config.py.jinja

import os
from dotenv import load_dotenv
from pydantic import BaseSettings, Field, SecretStr

load_dotenv() # Load environment variables from .env file

class Settings(BaseSettings):
    APP_NAME: str = "{{ project.name }}"
    APP_SLUG: str = "{{ project.slug }}"
    APP_VERSION: str = "{{ project.version }}"
    APP_AUTHOR: str = "{{ project.author }}"
    APP_ENV: str = Field("development", env='APP_ENV') # 'development' or 'production'

    SECRET_KEY: SecretStr = Field(..., env='SECRET_KEY') # Global secret key

    {% if component_features.BackendFastAPI.database_support %}
    DATABASE_URL: str = Field("sqlite:///./sql_app.db", env='DATABASE_URL')
    {% if value_features.db_type == 'postgres' %}
    DATABASE_CONNECTION_STRING: str = Field(..., env='DATABASE_CONNECTION_STRING')
    {% endif %}
    {% endif %}

    {% if component_features.BackendFastAPI.auth_jwt %}
    JWT_SECRET_KEY: SecretStr = Field(..., env='JWT_SECRET_KEY')
    JWT_ALGORITHM: str = Field("HS256", env='JWT_ALGORITHM')
    JWT_ACCESS_TOKEN_EXPIRE_MINUTES: int = Field(30, env='JWT_ACCESS_TOKEN_EXPIRE_MINUTES')
    {% endif %}

    class Config:
        case_sensitive = True
        env_file = ".env"
        env_file_encoding = 'utf-8'

settings = Settings()

# Make JWT secrets directly available if auth_jwt is enabled (for simplicity in this example)
{% if component_features.BackendFastAPI.auth_jwt %}
SECRET_KEY_JWT = settings.JWT_SECRET_KEY.get_secret_value()
ALGORITHM_JWT = settings.JWT_ALGORITHM
ACCESS_TOKEN_EXPIRE_MINUTES = settings.JWT_ACCESS_TOKEN_EXPIRE_MINUTES
{% endif %}