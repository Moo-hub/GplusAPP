# {{ project.name }} - Backend API (FastAPI)

This is the backend API for your {{ project.name }} project, built with FastAPI.

## Technologies Used

* Python {{ project.python_version }}
* FastAPI
* Uvicorn
* {% if component_features.BackendFastAPI.database_support %}SQLAlchemy (ORM){% endif %}
* {% if component_features.BackendFastAPI.database_support %}Alembic (Database Migrations){% endif %}
* {% if component_features.BackendFastAPI.auth_jwt %}JWT for Authentication{% endif %}
* Python-Dotenv for environment variables

## Setup

1.  **Navigate to the backend directory:**
    ```bash
    cd backend/{{ project.slug }}-api
    ```

2.  **Create a Python virtual environment and activate it:**
    ```bash
    python -m venv .venv
    # On Windows: .venv\Scripts\activate
    # On macOS/Linux: source .venv/bin/activate
    ```

3.  **Install dependencies:**
    ```bash
    pip install -r requirements.txt
    ```

4.  **Configure environment variables:**
    Copy the `.env.example` (or use the main project's `.env`) and fill in the necessary details, especially for `SECRET_KEY`, `DATABASE_URL`{% if component_features.BackendFastAPI.auth_jwt %}, `JWT_SECRET_KEY`{% endif %}.

5.  **Run database migrations (if database support is enabled):**
    {% if component_features.BackendFastAPI.database_support %}
    ```bash
    # Initialize Alembic (run only once for a new project)
    alembic init alembic

    # Edit alembic.ini to point to your database.py, and env.py to import your models.
    # Then generate your first migration:
    alembic revision --autogenerate -m "Initial migration"
    alembic upgrade head
    ```
    {% else %}
    Database support is not enabled for this backend.
    {% endif %}

6.  **Run the application:**
    ```bash
    uvicorn main:app --reload
    ```
    The API will be available at `http://127.0.0.1:8000`{% if value_features.api_prefix %}{{ value_features.api_prefix }}{% endif %} (or the port Uvicorn specifies).
    The interactive API documentation will be at `http://127.0.0.1:8000/docs`{% if value_features.api_prefix %}{{ value_features.api_prefix }}{% endif %}/docs.

## API Endpoints (Examples)

* `GET /`: Basic HTML welcome page.
* `GET /health`: Health check endpoint.
{% if component_features.BackendFastAPI.database_support %}
* `POST /users/`: Create a new user.
* `GET /users/`: Get a list of users.
* `GET /users/{user_id}`: Get a specific user by ID.
{% endif %}
{% if component_features.BackendFastAPI.auth_jwt %}
* `POST /token`: Obtain an access token (for authentication).
* `GET /users/me/`: Get current authenticated user details (requires token).
{% endif %}

## Testing

This project includes hermetic pytest tests for quality assurance.

### Running Tests

To run all non-manual tests:
```bash
pytest
```

Or explicitly exclude manual tests:
```bash
pytest -k "not manual"
```

To run specific test files:
```bash
pytest tests/test_json_encoder_unit.py
pytest tests/test_api_endpoints_client.py
```

To run tests with verbose output:
```bash
pytest -v
```

### Test Structure

- `tests/conftest.py`: Pytest fixtures for database and test client
- `tests/test_json_encoder_unit.py`: Unit tests for JSON encoder with recursion prevention
- `tests/test_api_endpoints_client.py`: API endpoint integration tests
{% if component_features.BackendFastAPI.database_support %}
- `tests/test_create_test_user_client.py`: User creation tests
- `tests/test_json_serialization_client.py`: Tests for JSON serialization of ORM models
- `tests/test_check_db_schema_client.py`: Database schema validation tests
{% endif %}
- `tests/manual/`: Manual test scripts (excluded from default test runs)

### Pydantic v2 Compatibility

The generated code is compatible with both Pydantic v1 and v2:
- Automatically detects Pydantic version at runtime
- Uses `model_config` with `ConfigDict` for v2
- Falls back to `class Config` for v1
- In schemas: uses `from_attributes=True` (v2) or `orm_mode=True` (v1)

### JSON Encoder Hardening

The `app/utils/json_encoder.py` module provides:
- Recursion prevention for cyclic SQLAlchemy relationships
- Type preservation (primitives returned unchanged)
- Reference placeholders for already-seen ORM instances
- Safe handling of complex object graphs