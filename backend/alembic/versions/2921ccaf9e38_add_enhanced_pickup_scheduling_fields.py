"""add_enhanced_pickup_scheduling_fields

Revision ID: 2921ccaf9e38
Revises: 5fdbbbf32a86
Create Date: 2025-09-28 00:27:35.128910

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), ".."))
from utils import add_column_if_not_exists

# revision identifiers, used by Alembic.
revision: str = '2921ccaf9e38'
down_revision: Union[str, Sequence[str], None] = '5fdbbbf32a86'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('partners',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('website', sa.String(), nullable=True),
    sa.Column('logo_url', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_partners_id'), 'partners', ['id'], unique=False)
    op.create_table('redemption_options',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('points_required', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('partner_id', sa.Integer(), nullable=True),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('stock', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_redemption_options_id'), 'redemption_options', ['id'], unique=False)
    op.create_table('point_redemptions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('option_id', sa.Integer(), nullable=False),
    sa.Column('points_spent', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'COMPLETED', 'CANCELLED', 'EXPIRED', name='redemptionstatus'), nullable=False),
    sa.Column('redemption_code', sa.String(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['option_id'], ['redemption_options.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_point_redemptions_id'), 'point_redemptions', ['id'], unique=False)
    
    # Create enum type first
    recurrence_type = sa.Enum('NONE', 'WEEKLY', 'BI_WEEKLY', 'MONTHLY', name='recurrencetype')
    recurrence_type.create(op.get_bind(), checkfirst=True)
    
    # Add columns
    add_column_if_not_exists('pickup_requests', sa.Column('time_slot', sa.String(), nullable=True))
    add_column_if_not_exists('pickup_requests', sa.Column('recurrence_type', sa.Enum('NONE', 'WEEKLY', 'BI_WEEKLY', 'MONTHLY', name='recurrencetype'), nullable=False, server_default='NONE'))
    add_column_if_not_exists('pickup_requests', sa.Column('recurrence_end_date', sa.DateTime(timezone=True), nullable=True))
    add_column_if_not_exists('pickup_requests', sa.Column('is_recurring', sa.Boolean(), nullable=True))
    add_column_if_not_exists('pickup_requests', sa.Column('calendar_event_id', sa.String(), nullable=True))
    add_column_if_not_exists('point_transactions', sa.Column('redemption_id', sa.Integer(), nullable=True))
    op.alter_column('point_transactions', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('point_transactions', 'points',
               existing_type=sa.INTEGER(),
               nullable=False)
    # Create transaction enums
    transaction_type = sa.Enum('EARN', 'SPEND', name='transactiontype')
    transaction_type.create(op.get_bind(), checkfirst=True)
    
    transaction_source = sa.Enum('PICKUP', 'REWARD', 'REFERRAL', 'SYSTEM', 'MANUAL', 'REDEMPTION', name='transactionsource')
    transaction_source.create(op.get_bind(), checkfirst=True)
    
    transaction_status = sa.Enum('PENDING', 'COMPLETED', 'CANCELLED', name='transactionstatus')
    transaction_status.create(op.get_bind(), checkfirst=True)
    
    # Use raw SQL to convert column types with explicit casting
    op.execute("ALTER TABLE point_transactions ALTER COLUMN type TYPE transactiontype USING type::text::transactiontype")
    op.execute("ALTER TABLE point_transactions ALTER COLUMN source TYPE transactionsource USING source::text::transactionsource")
    op.execute("ALTER TABLE point_transactions ALTER COLUMN status TYPE transactionstatus USING status::text::transactionstatus")
    op.alter_column('point_transactions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.create_foreign_key(None, 'point_transactions', 'point_redemptions', ['redemption_id'], ['id'])
    op.drop_column('point_transactions', 'reference')
    op.alter_column('users', 'name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_column('users', 'is_superuser')
    # ### end Alembic commands ###
    
def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Remove columns first
    op.drop_column('pickup_requests', 'calendar_event_id')
    op.drop_column('pickup_requests', 'is_recurring')
    op.drop_column('pickup_requests', 'recurrence_end_date')
    op.drop_column('pickup_requests', 'recurrence_type')
    op.drop_column('pickup_requests', 'time_slot')
    
    # Drop enum type
    sa.Enum(name='recurrencetype').drop(op.get_bind())


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('users', 'name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.add_column('point_transactions', sa.Column('reference', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'point_transactions', type_='foreignkey')
    op.alter_column('point_transactions', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('point_transactions', 'status',
               existing_type=sa.Enum('PENDING', 'COMPLETED', 'CANCELLED', name='transactionstatus'),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('point_transactions', 'source',
               existing_type=sa.Enum('PICKUP', 'REWARD', 'REFERRAL', 'SYSTEM', 'MANUAL', 'REDEMPTION', name='transactionsource'),
               type_=sa.VARCHAR(),
               nullable=False)
    op.alter_column('point_transactions', 'type',
               existing_type=sa.Enum('EARN', 'SPEND', name='transactiontype'),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.alter_column('point_transactions', 'points',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('point_transactions', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('point_transactions', 'redemption_id')
    op.drop_column('pickup_requests', 'calendar_event_id')
    op.drop_column('pickup_requests', 'is_recurring')
    op.drop_column('pickup_requests', 'recurrence_end_date')
    op.drop_column('pickup_requests', 'recurrence_type')
    op.drop_column('pickup_requests', 'time_slot')
    op.drop_index(op.f('ix_point_redemptions_id'), table_name='point_redemptions')
    op.drop_table('point_redemptions')
    op.drop_index(op.f('ix_redemption_options_id'), table_name='redemption_options')
    op.drop_table('redemption_options')
    op.drop_index(op.f('ix_partners_id'), table_name='partners')
    op.drop_table('partners')
    # ### end Alembic commands ###
