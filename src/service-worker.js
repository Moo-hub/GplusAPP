// Service worker for offline support
import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { BackgroundSyncPlugin } from 'workbox-background-sync';

// Take control immediately
clientsClaim();

// Precache all assets generated by the build process
precacheAndRoute(self.__WB_MANIFEST);

// Handle navigation to multiple routes using the static file index.html
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false only for routes starting with /
  ({ request, url }) => {
    // Is this a basic URL request?
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a static file request (like CSS or image), use a different strategy
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to handle navigation request with index.html
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Cache images with a Cache First strategy
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
);

// Handle caching strategy for API requests
registerRoute(
  ({ url }) => url.pathname.startsWith('/api'),
  new NetworkFirst({
    cacheName: 'api-responses',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 12 * 60 * 60, // 12 hours
      }),
    ],
  })
);

// Background sync for offline form submissions
const bgSyncPlugin = new BackgroundSyncPlugin('offline-forms-queue', {
  maxRetentionTime: 24 * 60 // Retry for 24 hours (specified in minutes)
});

// Register a route for form submissions with the background sync plugin
registerRoute(
  ({ url }) => 
    url.pathname.includes('/api/pickup') || 
    url.pathname.includes('/api/user') ||
    url.pathname.includes('/api/redemption'),
  new NetworkFirst({
    plugins: [bgSyncPlugin],
    cacheName: 'form-submissions',
  }),
  'POST'
);

// Handle CSS and JS using StaleWhileRevalidate strategy
registerRoute(
  ({ request }) =>
    request.destination === 'script' || request.destination === 'style',
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
  })
);

// Listen for service worker install event
self.addEventListener('install', (event) => {
  self.skipWaiting();
});

// Handle messages from the main app
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }

  // Handle offline/online status changes
  if (event.data && event.data.type === 'ONLINE_STATUS_CHANGE') {
    // Could notify all clients about connection status change
    self.clients.matchAll().then(clients => {
      clients.forEach(client => {
        client.postMessage({
          type: 'CONNECTION_STATUS',
          payload: event.data.payload
        });
      });
    });
  }
});

// Listen for fetch events to provide custom offline responses
self.addEventListener('fetch', event => {
  // Special handling for API endpoints that should work offline
  if (event.request.url.includes('/api/') && !navigator.onLine) {
    // Check if it's a GET request we can handle with cached data
    if (event.request.method === 'GET') {
      event.respondWith(
        caches.match(event.request).then(cachedResponse => {
          if (cachedResponse) {
            return cachedResponse;
          }
          return caches.match('/offline.html');
        })
      );
    }
  }
});

// Sync event listener for when the user comes back online
self.addEventListener('sync', event => {
  if (event.tag === 'sync-pending-requests') {
    event.waitUntil(syncPendingRequests());
  }
});

// Function to sync all pending requests from IndexedDB
async function syncPendingRequests() {
  // Implementation will be handled by the background sync plugin
  console.log('Syncing pending requests');
}